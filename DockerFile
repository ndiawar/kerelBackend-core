# backend-core/Dockerfile

# Étape 1 - Environnement PHP
FROM php:8.2-fpm

# Arguments de construction
ARG APP_ENV=production
ENV APP_ENV=${APP_ENV}

# Dépendances système
RUN apt-get update && apt-get install -y \
    git \
    unzip \
    libzip-dev \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    libpq-dev \
    curl \
    && docker-php-ext-install \
    pdo_mysql \
    zip \
    mbstring \
    exif \
    pcntl \
    gd \
    && pecl install redis \
    && docker-php-ext-enable redis

# Installer Composer
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# Installer Node.js et npm
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs

# Répertoire de travail
WORKDIR /var/www/html

# Copier les fichiers de dépendances
COPY composer.json composer.lock package.json vite.config.js ./

# Installer les dépendances PHP
RUN if [ "$APP_ENV" = "production" ]; then \
    composer install --no-dev --no-scripts --no-autoloader --optimize-autoloader; \
    else \
    composer install --no-scripts --no-autoloader; \
    fi

# Copier toute l'application
COPY . .

# Configurer les permissions
RUN chown -R www-data:www-data storage bootstrap/cache
RUN chmod -R 775 storage bootstrap/cache

# Générer l'autoload et optimiser
RUN composer dump-autoload --optimize

# Installer les dépendances frontend (seulement en développement)
RUN if [ "$APP_ENV" != "production" ]; then \
    npm install && npm run build; \
    fi

# Exposer le port 9000 pour PHP-FPM
EXPOSE 9000

# Commande de démarrage
CMD ["php-fpm"]